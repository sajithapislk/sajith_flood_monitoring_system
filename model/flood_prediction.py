# -*- coding: utf-8 -*-
"""flood_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19ZH8vjsqk5noS4IZK_pdYbBNsoKpxwHU
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import folium
from folium.plugins import MarkerCluster
from folium.plugins import HeatMap
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

df=pd.read_csv('realistic_flood_data_sri_lanka.csv')
df.head()

df.isnull().sum()

df_encoded = pd.get_dummies(df, columns=['Place', 'Month'], drop_first=True)

X = df_encoded.drop('Flooded', axis=1)
y = df_encoded['Flooded'].astype(int)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print(df.columns)

print(df_encoded.columns)

model = RandomForestClassifier(n_estimators=100,random_state=42)

model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)


accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

print(classification_report(y_test, y_pred))

def predict_flood(place, water_level, distance_to_river, soil_saturation, river_flow, drainage_capacity, month):
    # Create a dictionary for the new data point
    new_data = {
        'Water_Level_in_Rain_Gauge': [water_level],
        'Distance_to_River': [distance_to_river],
        'Soil_Saturation': [soil_saturation],
        'River_Flow': [river_flow],
        'Drainage_Capacity': [drainage_capacity],
        'Place_Anuradhapura': [1 if place == 'Anuradhapura' else 0],
        'Place_Batticaloa': [1 if place == 'Batticaloa' else 0],
        'Place_Colombo': [1 if place == 'Colombo' else 0],
        'Place_Kurunegala': [1 if place == 'Kurunegala' else 0],
        'Month_December': [1 if month == 'December' else 0],
        'Month_June': [1 if month == 'June' else 0],
        'Month_March': [1 if month == 'March' else 0],
        'Month_May': [1 if month == 'May' else 0],
        'Month_October': [1 if month == 'October' else 0]
    }

    # Convert the new data to a DataFrame
    new_df = pd.DataFrame(new_data)

    # Align the new data with the training data's columns (by reindexing)
    new_df = new_df.reindex(columns=X_train.columns, fill_value=0)

    # Make a prediction
    prediction = model.predict(new_df)

    # Output the prediction
    print(prediction[0])
    if prediction[0] == 1:
        return "Flood predicted!"
    else:
        return "No flood predicted."

result = predict_flood(
    place='Matale',
    water_level=100.0,
    distance_to_river=10.0,
    soil_saturation=10.0,
    river_flow=0.0,
    drainage_capacity=0.1,
    month='May'
)
print(result)